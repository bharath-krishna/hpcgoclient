/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PodStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodStatus{}

// PodStatus struct for PodStatus
type PodStatus struct {
	Conditions []Condition `json:"conditions"`
	StartTime NullableTime `json:"start_time"`
	Reason NullableString `json:"reason"`
	Message NullableString `json:"message"`
	Phase string `json:"phase"`
}

type _PodStatus PodStatus

// NewPodStatus instantiates a new PodStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodStatus(conditions []Condition, startTime NullableTime, reason NullableString, message NullableString, phase string) *PodStatus {
	this := PodStatus{}
	this.Conditions = conditions
	this.StartTime = startTime
	this.Reason = reason
	this.Message = message
	this.Phase = phase
	return &this
}

// NewPodStatusWithDefaults instantiates a new PodStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodStatusWithDefaults() *PodStatus {
	this := PodStatus{}
	return &this
}

// GetConditions returns the Conditions field value
// If the value is explicit nil, the zero value for []Condition will be returned
func (o *PodStatus) GetConditions() []Condition {
	if o == nil {
		var ret []Condition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodStatus) GetConditionsOk() ([]Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *PodStatus) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetStartTime returns the StartTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PodStatus) GetStartTime() time.Time {
	if o == nil || o.StartTime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodStatus) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// SetStartTime sets field value
func (o *PodStatus) SetStartTime(v time.Time) {
	o.StartTime.Set(&v)
}

// GetReason returns the Reason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PodStatus) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}

	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodStatus) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// SetReason sets field value
func (o *PodStatus) SetReason(v string) {
	o.Reason.Set(&v)
}

// GetMessage returns the Message field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PodStatus) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}

	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodStatus) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// SetMessage sets field value
func (o *PodStatus) SetMessage(v string) {
	o.Message.Set(&v)
}

// GetPhase returns the Phase field value
func (o *PodStatus) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *PodStatus) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *PodStatus) SetPhase(v string) {
	o.Phase = v
}

func (o PodStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["start_time"] = o.StartTime.Get()
	toSerialize["reason"] = o.Reason.Get()
	toSerialize["message"] = o.Message.Get()
	toSerialize["phase"] = o.Phase
	return toSerialize, nil
}

func (o *PodStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditions",
		"start_time",
		"reason",
		"message",
		"phase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPodStatus := _PodStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPodStatus)

	if err != nil {
		return err
	}

	*o = PodStatus(varPodStatus)

	return err
}

type NullablePodStatus struct {
	value *PodStatus
	isSet bool
}

func (v NullablePodStatus) Get() *PodStatus {
	return v.value
}

func (v *NullablePodStatus) Set(val *PodStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePodStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePodStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodStatus(val *PodStatus) *NullablePodStatus {
	return &NullablePodStatus{value: val, isSet: true}
}

func (v NullablePodStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


