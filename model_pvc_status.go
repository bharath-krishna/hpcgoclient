/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PVCStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PVCStatus{}

// PVCStatus struct for PVCStatus
type PVCStatus struct {
	AccessModes []string `json:"access_modes"`
	AllocatedResourceStatuses interface{} `json:"allocated_resource_statuses"`
	AllocatedResources interface{} `json:"allocated_resources"`
	Capacity Capacity `json:"capacity"`
	Conditions interface{} `json:"conditions"`
	Phase string `json:"phase"`
}

type _PVCStatus PVCStatus

// NewPVCStatus instantiates a new PVCStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPVCStatus(accessModes []string, allocatedResourceStatuses interface{}, allocatedResources interface{}, capacity Capacity, conditions interface{}, phase string) *PVCStatus {
	this := PVCStatus{}
	this.AccessModes = accessModes
	this.AllocatedResourceStatuses = allocatedResourceStatuses
	this.AllocatedResources = allocatedResources
	this.Capacity = capacity
	this.Conditions = conditions
	this.Phase = phase
	return &this
}

// NewPVCStatusWithDefaults instantiates a new PVCStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPVCStatusWithDefaults() *PVCStatus {
	this := PVCStatus{}
	return &this
}

// GetAccessModes returns the AccessModes field value
func (o *PVCStatus) GetAccessModes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value
// and a boolean to check if the value has been set.
func (o *PVCStatus) GetAccessModesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessModes, true
}

// SetAccessModes sets field value
func (o *PVCStatus) SetAccessModes(v []string) {
	o.AccessModes = v
}

// GetAllocatedResourceStatuses returns the AllocatedResourceStatuses field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *PVCStatus) GetAllocatedResourceStatuses() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.AllocatedResourceStatuses
}

// GetAllocatedResourceStatusesOk returns a tuple with the AllocatedResourceStatuses field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PVCStatus) GetAllocatedResourceStatusesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllocatedResourceStatuses) {
		return nil, false
	}
	return &o.AllocatedResourceStatuses, true
}

// SetAllocatedResourceStatuses sets field value
func (o *PVCStatus) SetAllocatedResourceStatuses(v interface{}) {
	o.AllocatedResourceStatuses = v
}

// GetAllocatedResources returns the AllocatedResources field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *PVCStatus) GetAllocatedResources() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.AllocatedResources
}

// GetAllocatedResourcesOk returns a tuple with the AllocatedResources field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PVCStatus) GetAllocatedResourcesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllocatedResources) {
		return nil, false
	}
	return &o.AllocatedResources, true
}

// SetAllocatedResources sets field value
func (o *PVCStatus) SetAllocatedResources(v interface{}) {
	o.AllocatedResources = v
}

// GetCapacity returns the Capacity field value
func (o *PVCStatus) GetCapacity() Capacity {
	if o == nil {
		var ret Capacity
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *PVCStatus) GetCapacityOk() (*Capacity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *PVCStatus) SetCapacity(v Capacity) {
	o.Capacity = v
}

// GetConditions returns the Conditions field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *PVCStatus) GetConditions() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PVCStatus) GetConditionsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *PVCStatus) SetConditions(v interface{}) {
	o.Conditions = v
}

// GetPhase returns the Phase field value
func (o *PVCStatus) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *PVCStatus) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *PVCStatus) SetPhase(v string) {
	o.Phase = v
}

func (o PVCStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PVCStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_modes"] = o.AccessModes
	if o.AllocatedResourceStatuses != nil {
		toSerialize["allocated_resource_statuses"] = o.AllocatedResourceStatuses
	}
	if o.AllocatedResources != nil {
		toSerialize["allocated_resources"] = o.AllocatedResources
	}
	toSerialize["capacity"] = o.Capacity
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["phase"] = o.Phase
	return toSerialize, nil
}

func (o *PVCStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_modes",
		"allocated_resource_statuses",
		"allocated_resources",
		"capacity",
		"conditions",
		"phase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPVCStatus := _PVCStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPVCStatus)

	if err != nil {
		return err
	}

	*o = PVCStatus(varPVCStatus)

	return err
}

type NullablePVCStatus struct {
	value *PVCStatus
	isSet bool
}

func (v NullablePVCStatus) Get() *PVCStatus {
	return v.value
}

func (v *NullablePVCStatus) Set(val *PVCStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePVCStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePVCStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePVCStatus(val *PVCStatus) *NullablePVCStatus {
	return &NullablePVCStatus{value: val, isSet: true}
}

func (v NullablePVCStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePVCStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


