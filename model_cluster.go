/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Cluster the model 'Cluster'
type Cluster string

// List of Cluster
const (
	ALL Cluster = "All"
	HPC_1 Cluster = "hpc-1"
	HPC_2 Cluster = "hpc-2"
	HPC_3 Cluster = "hpc-3"
	HPC_4 Cluster = "hpc-4"
)

// All allowed values of Cluster enum
var AllowedClusterEnumValues = []Cluster{
	"All",
	"hpc-1",
	"hpc-2",
	"hpc-3",
	"hpc-4",
}

func (v *Cluster) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Cluster(value)
	for _, existing := range AllowedClusterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Cluster", value)
}

// NewClusterFromValue returns a pointer to a valid Cluster
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterFromValue(v string) (*Cluster, error) {
	ev := Cluster(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Cluster: valid values are %v", v, AllowedClusterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Cluster) IsValid() bool {
	for _, existing := range AllowedClusterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Cluster value
func (v Cluster) Ptr() *Cluster {
	return &v
}

type NullableCluster struct {
	value *Cluster
	isSet bool
}

func (v NullableCluster) Get() *Cluster {
	return v.value
}

func (v *NullableCluster) Set(val *Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCluster(val *Cluster) *NullableCluster {
	return &NullableCluster{value: val, isSet: true}
}

func (v NullableCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

