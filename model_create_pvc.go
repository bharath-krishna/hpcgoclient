/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreatePVC type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePVC{}

// CreatePVC struct for CreatePVC
type CreatePVC struct {
	Name string `json:"name"`
	Namespace string `json:"namespace"`
	Storage int32 `json:"storage"`
	StorageUnit *string `json:"storage_unit,omitempty"`
}

type _CreatePVC CreatePVC

// NewCreatePVC instantiates a new CreatePVC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePVC(name string, namespace string, storage int32) *CreatePVC {
	this := CreatePVC{}
	this.Name = name
	this.Namespace = namespace
	this.Storage = storage
	var storageUnit string = "Gi"
	this.StorageUnit = &storageUnit
	return &this
}

// NewCreatePVCWithDefaults instantiates a new CreatePVC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePVCWithDefaults() *CreatePVC {
	this := CreatePVC{}
	var storageUnit string = "Gi"
	this.StorageUnit = &storageUnit
	return &this
}

// GetName returns the Name field value
func (o *CreatePVC) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePVC) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePVC) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *CreatePVC) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *CreatePVC) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *CreatePVC) SetNamespace(v string) {
	o.Namespace = v
}

// GetStorage returns the Storage field value
func (o *CreatePVC) GetStorage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *CreatePVC) GetStorageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *CreatePVC) SetStorage(v int32) {
	o.Storage = v
}

// GetStorageUnit returns the StorageUnit field value if set, zero value otherwise.
func (o *CreatePVC) GetStorageUnit() string {
	if o == nil || IsNil(o.StorageUnit) {
		var ret string
		return ret
	}
	return *o.StorageUnit
}

// GetStorageUnitOk returns a tuple with the StorageUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePVC) GetStorageUnitOk() (*string, bool) {
	if o == nil || IsNil(o.StorageUnit) {
		return nil, false
	}
	return o.StorageUnit, true
}

// HasStorageUnit returns a boolean if a field has been set.
func (o *CreatePVC) HasStorageUnit() bool {
	if o != nil && !IsNil(o.StorageUnit) {
		return true
	}

	return false
}

// SetStorageUnit gets a reference to the given string and assigns it to the StorageUnit field.
func (o *CreatePVC) SetStorageUnit(v string) {
	o.StorageUnit = &v
}

func (o CreatePVC) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePVC) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["storage"] = o.Storage
	if !IsNil(o.StorageUnit) {
		toSerialize["storage_unit"] = o.StorageUnit
	}
	return toSerialize, nil
}

func (o *CreatePVC) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"namespace",
		"storage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePVC := _CreatePVC{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePVC)

	if err != nil {
		return err
	}

	*o = CreatePVC(varCreatePVC)

	return err
}

type NullableCreatePVC struct {
	value *CreatePVC
	isSet bool
}

func (v NullableCreatePVC) Get() *CreatePVC {
	return v.value
}

func (v *NullableCreatePVC) Set(val *CreatePVC) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePVC) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePVC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePVC(val *CreatePVC) *NullableCreatePVC {
	return &NullableCreatePVC{value: val, isSet: true}
}

func (v NullableCreatePVC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePVC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


