/*
HPC Portal - API

Testing K8sAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/bharath-krishna/hpcgoclient"
)

func Test_openapi_K8sAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test K8sAPIService ClusterImageDefault", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster

		resp, httpRes, err := apiClient.K8sAPI.ClusterImageDefault(context.Background(), cluster).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService CreateNamespacedJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string

		resp, httpRes, err := apiClient.K8sAPI.CreateNamespacedJob(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService CreateRbac", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.K8sAPI.CreateRbac(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetAllJobsDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string
		var kind Kind

		resp, httpRes, err := apiClient.K8sAPI.GetAllJobsDetails(context.Background(), cluster, namespace, kind).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetDetailsOfJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.K8sAPI.GetDetailsOfJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetJobDescription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.K8sAPI.GetJobDescription(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetJobPriorityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.K8sAPI.GetJobPriorityTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetJobPriorityTypesNew", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string

		resp, httpRes, err := apiClient.K8sAPI.GetJobPriorityTypesNew(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string
		var podName string
		var container string

		resp, httpRes, err := apiClient.K8sAPI.GetLog(context.Background(), cluster, namespace, podName, container).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetLogLoki", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.K8sAPI.GetLogLoki(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetStatusTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.K8sAPI.GetStatusTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetTemplateFromJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.K8sAPI.GetTemplateFromJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetUsersNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster

		resp, httpRes, err := apiClient.K8sAPI.GetUsersNamespaces(context.Background(), cluster).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListClusters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.K8sAPI.ListClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListClusters_1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.K8sAPI.ListClusters_0(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListJobKinds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster

		resp, httpRes, err := apiClient.K8sAPI.ListJobKinds(context.Background(), cluster).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService PutJobDescription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.K8sAPI.PutJobDescription(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService TerminateJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.K8sAPI.TerminateJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
