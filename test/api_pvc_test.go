/*
HPC Portal - API

Testing PvcAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/bharath-krishna/hpcgoclient"
)

func Test_openapi_PvcAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PvcAPIService CreateNamespacedPvcs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string

		resp, httpRes, err := apiClient.PvcAPI.CreateNamespacedPvcs(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PvcAPIService DeleteNamespacedPvcs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string
		var pvcName string

		resp, httpRes, err := apiClient.PvcAPI.DeleteNamespacedPvcs(context.Background(), cluster, namespace, pvcName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PvcAPIService GetNamespacedPvcs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string

		resp, httpRes, err := apiClient.PvcAPI.GetNamespacedPvcs(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PvcAPIService GetNamespacedPvcsDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string

		resp, httpRes, err := apiClient.PvcAPI.GetNamespacedPvcsDetails(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PvcAPIService GetPvcStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string
		var pvcName string

		resp, httpRes, err := apiClient.PvcAPI.GetPvcStatus(context.Background(), cluster, namespace, pvcName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PvcAPIService StartPvcviewer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string
		var pvcName string

		resp, httpRes, err := apiClient.PvcAPI.StartPvcviewer(context.Background(), cluster, namespace, pvcName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PvcAPIService StopPvcviewer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster Cluster
		var namespace string
		var pvcName string

		resp, httpRes, err := apiClient.PvcAPI.StopPvcviewer(context.Background(), cluster, namespace, pvcName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
