/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// JobPriority the model 'JobPriority'
type JobPriority string

// List of JobPriority
const (
	_0 JobPriority = "level-0"
	_1 JobPriority = "level-1"
	_2 JobPriority = "level-2"
	MN JobPriority = "level-mn"
)

// All allowed values of JobPriority enum
var AllowedJobPriorityEnumValues = []JobPriority{
	"level-0",
	"level-1",
	"level-2",
	"level-mn",
}

func (v *JobPriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobPriority(value)
	for _, existing := range AllowedJobPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobPriority", value)
}

// NewJobPriorityFromValue returns a pointer to a valid JobPriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobPriorityFromValue(v string) (*JobPriority, error) {
	ev := JobPriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobPriority: valid values are %v", v, AllowedJobPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobPriority) IsValid() bool {
	for _, existing := range AllowedJobPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobPriority value
func (v JobPriority) Ptr() *JobPriority {
	return &v
}

type NullableJobPriority struct {
	value *JobPriority
	isSet bool
}

func (v NullableJobPriority) Get() *JobPriority {
	return v.value
}

func (v *NullableJobPriority) Set(val *JobPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableJobPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableJobPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobPriority(val *JobPriority) *NullableJobPriority {
	return &NullableJobPriority{value: val, isSet: true}
}

func (v NullableJobPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

