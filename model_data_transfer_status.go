/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DataTransferStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTransferStatus{}

// DataTransferStatus struct for DataTransferStatus
type DataTransferStatus struct {
	TransferId string `json:"transfer_id"`
	Description string `json:"description"`
	Status Status `json:"status"`
	StartDatetime time.Time `json:"start_datetime"`
	EndDatetime NullableTime `json:"end_datetime"`
	Owner string `json:"owner"`
	Source DataTransferEndpoint `json:"source"`
	Target DataTransferEndpoint `json:"target"`
	Logs DataTransferLogs `json:"logs"`
}

type _DataTransferStatus DataTransferStatus

// NewDataTransferStatus instantiates a new DataTransferStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferStatus(transferId string, description string, status Status, startDatetime time.Time, endDatetime NullableTime, owner string, source DataTransferEndpoint, target DataTransferEndpoint, logs DataTransferLogs) *DataTransferStatus {
	this := DataTransferStatus{}
	this.TransferId = transferId
	this.Description = description
	this.Status = status
	this.StartDatetime = startDatetime
	this.EndDatetime = endDatetime
	this.Owner = owner
	this.Source = source
	this.Target = target
	this.Logs = logs
	return &this
}

// NewDataTransferStatusWithDefaults instantiates a new DataTransferStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferStatusWithDefaults() *DataTransferStatus {
	this := DataTransferStatus{}
	return &this
}

// GetTransferId returns the TransferId field value
func (o *DataTransferStatus) GetTransferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferId
}

// GetTransferIdOk returns a tuple with the TransferId field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetTransferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferId, true
}

// SetTransferId sets field value
func (o *DataTransferStatus) SetTransferId(v string) {
	o.TransferId = v
}

// GetDescription returns the Description field value
func (o *DataTransferStatus) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DataTransferStatus) SetDescription(v string) {
	o.Description = v
}

// GetStatus returns the Status field value
func (o *DataTransferStatus) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetStatusOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DataTransferStatus) SetStatus(v Status) {
	o.Status = v
}

// GetStartDatetime returns the StartDatetime field value
func (o *DataTransferStatus) GetStartDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDatetime
}

// GetStartDatetimeOk returns a tuple with the StartDatetime field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetStartDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDatetime, true
}

// SetStartDatetime sets field value
func (o *DataTransferStatus) SetStartDatetime(v time.Time) {
	o.StartDatetime = v
}

// GetEndDatetime returns the EndDatetime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *DataTransferStatus) GetEndDatetime() time.Time {
	if o == nil || o.EndDatetime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.EndDatetime.Get()
}

// GetEndDatetimeOk returns a tuple with the EndDatetime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferStatus) GetEndDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDatetime.Get(), o.EndDatetime.IsSet()
}

// SetEndDatetime sets field value
func (o *DataTransferStatus) SetEndDatetime(v time.Time) {
	o.EndDatetime.Set(&v)
}

// GetOwner returns the Owner field value
func (o *DataTransferStatus) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *DataTransferStatus) SetOwner(v string) {
	o.Owner = v
}

// GetSource returns the Source field value
func (o *DataTransferStatus) GetSource() DataTransferEndpoint {
	if o == nil {
		var ret DataTransferEndpoint
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetSourceOk() (*DataTransferEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DataTransferStatus) SetSource(v DataTransferEndpoint) {
	o.Source = v
}

// GetTarget returns the Target field value
func (o *DataTransferStatus) GetTarget() DataTransferEndpoint {
	if o == nil {
		var ret DataTransferEndpoint
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetTargetOk() (*DataTransferEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *DataTransferStatus) SetTarget(v DataTransferEndpoint) {
	o.Target = v
}

// GetLogs returns the Logs field value
func (o *DataTransferStatus) GetLogs() DataTransferLogs {
	if o == nil {
		var ret DataTransferLogs
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatus) GetLogsOk() (*DataTransferLogs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logs, true
}

// SetLogs sets field value
func (o *DataTransferStatus) SetLogs(v DataTransferLogs) {
	o.Logs = v
}

func (o DataTransferStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTransferStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transfer_id"] = o.TransferId
	toSerialize["description"] = o.Description
	toSerialize["status"] = o.Status
	toSerialize["start_datetime"] = o.StartDatetime
	toSerialize["end_datetime"] = o.EndDatetime.Get()
	toSerialize["owner"] = o.Owner
	toSerialize["source"] = o.Source
	toSerialize["target"] = o.Target
	toSerialize["logs"] = o.Logs
	return toSerialize, nil
}

func (o *DataTransferStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transfer_id",
		"description",
		"status",
		"start_datetime",
		"end_datetime",
		"owner",
		"source",
		"target",
		"logs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTransferStatus := _DataTransferStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTransferStatus)

	if err != nil {
		return err
	}

	*o = DataTransferStatus(varDataTransferStatus)

	return err
}

type NullableDataTransferStatus struct {
	value *DataTransferStatus
	isSet bool
}

func (v NullableDataTransferStatus) Get() *DataTransferStatus {
	return v.value
}

func (v *NullableDataTransferStatus) Set(val *DataTransferStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferStatus(val *DataTransferStatus) *NullableDataTransferStatus {
	return &NullableDataTransferStatus{value: val, isSet: true}
}

func (v NullableDataTransferStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


