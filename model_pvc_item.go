/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PVCItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PVCItem{}

// PVCItem struct for PVCItem
type PVCItem struct {
	Name string `json:"name"`
	Namespace string `json:"namespace"`
	Cluster Cluster `json:"cluster"`
	Owner string `json:"owner"`
	UsagePercent int32 `json:"usage_percent"`
	Usage string `json:"usage"`
	Quota string `json:"quota"`
	Pvcviewer PVCViewer `json:"pvcviewer"`
}

type _PVCItem PVCItem

// NewPVCItem instantiates a new PVCItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPVCItem(name string, namespace string, cluster Cluster, owner string, usagePercent int32, usage string, quota string, pvcviewer PVCViewer) *PVCItem {
	this := PVCItem{}
	this.Name = name
	this.Namespace = namespace
	this.Cluster = cluster
	this.Owner = owner
	this.UsagePercent = usagePercent
	this.Usage = usage
	this.Quota = quota
	this.Pvcviewer = pvcviewer
	return &this
}

// NewPVCItemWithDefaults instantiates a new PVCItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPVCItemWithDefaults() *PVCItem {
	this := PVCItem{}
	return &this
}

// GetName returns the Name field value
func (o *PVCItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PVCItem) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *PVCItem) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *PVCItem) SetNamespace(v string) {
	o.Namespace = v
}

// GetCluster returns the Cluster field value
func (o *PVCItem) GetCluster() Cluster {
	if o == nil {
		var ret Cluster
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetClusterOk() (*Cluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *PVCItem) SetCluster(v Cluster) {
	o.Cluster = v
}

// GetOwner returns the Owner field value
func (o *PVCItem) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *PVCItem) SetOwner(v string) {
	o.Owner = v
}

// GetUsagePercent returns the UsagePercent field value
func (o *PVCItem) GetUsagePercent() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsagePercent
}

// GetUsagePercentOk returns a tuple with the UsagePercent field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetUsagePercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsagePercent, true
}

// SetUsagePercent sets field value
func (o *PVCItem) SetUsagePercent(v int32) {
	o.UsagePercent = v
}

// GetUsage returns the Usage field value
func (o *PVCItem) GetUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *PVCItem) SetUsage(v string) {
	o.Usage = v
}

// GetQuota returns the Quota field value
func (o *PVCItem) GetQuota() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetQuotaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quota, true
}

// SetQuota sets field value
func (o *PVCItem) SetQuota(v string) {
	o.Quota = v
}

// GetPvcviewer returns the Pvcviewer field value
func (o *PVCItem) GetPvcviewer() PVCViewer {
	if o == nil {
		var ret PVCViewer
		return ret
	}

	return o.Pvcviewer
}

// GetPvcviewerOk returns a tuple with the Pvcviewer field value
// and a boolean to check if the value has been set.
func (o *PVCItem) GetPvcviewerOk() (*PVCViewer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pvcviewer, true
}

// SetPvcviewer sets field value
func (o *PVCItem) SetPvcviewer(v PVCViewer) {
	o.Pvcviewer = v
}

func (o PVCItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PVCItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["cluster"] = o.Cluster
	toSerialize["owner"] = o.Owner
	toSerialize["usage_percent"] = o.UsagePercent
	toSerialize["usage"] = o.Usage
	toSerialize["quota"] = o.Quota
	toSerialize["pvcviewer"] = o.Pvcviewer
	return toSerialize, nil
}

func (o *PVCItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"namespace",
		"cluster",
		"owner",
		"usage_percent",
		"usage",
		"quota",
		"pvcviewer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPVCItem := _PVCItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPVCItem)

	if err != nil {
		return err
	}

	*o = PVCItem(varPVCItem)

	return err
}

type NullablePVCItem struct {
	value *PVCItem
	isSet bool
}

func (v NullablePVCItem) Get() *PVCItem {
	return v.value
}

func (v *NullablePVCItem) Set(val *PVCItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePVCItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePVCItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePVCItem(val *PVCItem) *NullablePVCItem {
	return &NullablePVCItem{value: val, isSet: true}
}

func (v NullablePVCItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePVCItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


