/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the JobItemFlat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobItemFlat{}

// JobItemFlat struct for JobItemFlat
type JobItemFlat struct {
	Cluster Cluster `json:"cluster"`
	Id string `json:"id"`
	Name string `json:"name"`
	K8sName string `json:"k8s_name"`
	Namespace string `json:"namespace"`
	Kind Kind `json:"kind"`
	GpuCount int32 `json:"gpu_count"`
	CpuCount int32 `json:"cpu_count"`
	MemoryCount int32 `json:"memory_count"`
	AvgGpuUtilization float32 `json:"avg_gpu_utilization"`
	CreationTimestamp time.Time `json:"creation_timestamp"`
	JobOwner string `json:"job_owner"`
	EndTimestamp NullableTime `json:"end_timestamp"`
	Status *Status `json:"status,omitempty"`
}

type _JobItemFlat JobItemFlat

// NewJobItemFlat instantiates a new JobItemFlat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobItemFlat(cluster Cluster, id string, name string, k8sName string, namespace string, kind Kind, gpuCount int32, cpuCount int32, memoryCount int32, avgGpuUtilization float32, creationTimestamp time.Time, jobOwner string, endTimestamp NullableTime) *JobItemFlat {
	this := JobItemFlat{}
	this.Cluster = cluster
	this.Id = id
	this.Name = name
	this.K8sName = k8sName
	this.Namespace = namespace
	this.Kind = kind
	this.GpuCount = gpuCount
	this.CpuCount = cpuCount
	this.MemoryCount = memoryCount
	this.AvgGpuUtilization = avgGpuUtilization
	this.CreationTimestamp = creationTimestamp
	this.JobOwner = jobOwner
	this.EndTimestamp = endTimestamp
	return &this
}

// NewJobItemFlatWithDefaults instantiates a new JobItemFlat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobItemFlatWithDefaults() *JobItemFlat {
	this := JobItemFlat{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *JobItemFlat) GetCluster() Cluster {
	if o == nil {
		var ret Cluster
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetClusterOk() (*Cluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *JobItemFlat) SetCluster(v Cluster) {
	o.Cluster = v
}

// GetId returns the Id field value
func (o *JobItemFlat) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JobItemFlat) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *JobItemFlat) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JobItemFlat) SetName(v string) {
	o.Name = v
}

// GetK8sName returns the K8sName field value
func (o *JobItemFlat) GetK8sName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.K8sName
}

// GetK8sNameOk returns a tuple with the K8sName field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetK8sNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.K8sName, true
}

// SetK8sName sets field value
func (o *JobItemFlat) SetK8sName(v string) {
	o.K8sName = v
}

// GetNamespace returns the Namespace field value
func (o *JobItemFlat) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *JobItemFlat) SetNamespace(v string) {
	o.Namespace = v
}

// GetKind returns the Kind field value
func (o *JobItemFlat) GetKind() Kind {
	if o == nil {
		var ret Kind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetKindOk() (*Kind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *JobItemFlat) SetKind(v Kind) {
	o.Kind = v
}

// GetGpuCount returns the GpuCount field value
func (o *JobItemFlat) GetGpuCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetGpuCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuCount, true
}

// SetGpuCount sets field value
func (o *JobItemFlat) SetGpuCount(v int32) {
	o.GpuCount = v
}

// GetCpuCount returns the CpuCount field value
func (o *JobItemFlat) GetCpuCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CpuCount
}

// GetCpuCountOk returns a tuple with the CpuCount field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetCpuCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpuCount, true
}

// SetCpuCount sets field value
func (o *JobItemFlat) SetCpuCount(v int32) {
	o.CpuCount = v
}

// GetMemoryCount returns the MemoryCount field value
func (o *JobItemFlat) GetMemoryCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryCount
}

// GetMemoryCountOk returns a tuple with the MemoryCount field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetMemoryCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryCount, true
}

// SetMemoryCount sets field value
func (o *JobItemFlat) SetMemoryCount(v int32) {
	o.MemoryCount = v
}

// GetAvgGpuUtilization returns the AvgGpuUtilization field value
func (o *JobItemFlat) GetAvgGpuUtilization() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvgGpuUtilization
}

// GetAvgGpuUtilizationOk returns a tuple with the AvgGpuUtilization field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetAvgGpuUtilizationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvgGpuUtilization, true
}

// SetAvgGpuUtilization sets field value
func (o *JobItemFlat) SetAvgGpuUtilization(v float32) {
	o.AvgGpuUtilization = v
}

// GetCreationTimestamp returns the CreationTimestamp field value
func (o *JobItemFlat) GetCreationTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTimestamp, true
}

// SetCreationTimestamp sets field value
func (o *JobItemFlat) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = v
}

// GetJobOwner returns the JobOwner field value
func (o *JobItemFlat) GetJobOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobOwner
}

// GetJobOwnerOk returns a tuple with the JobOwner field value
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetJobOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobOwner, true
}

// SetJobOwner sets field value
func (o *JobItemFlat) SetJobOwner(v string) {
	o.JobOwner = v
}

// GetEndTimestamp returns the EndTimestamp field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *JobItemFlat) GetEndTimestamp() time.Time {
	if o == nil || o.EndTimestamp.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.EndTimestamp.Get()
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobItemFlat) GetEndTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTimestamp.Get(), o.EndTimestamp.IsSet()
}

// SetEndTimestamp sets field value
func (o *JobItemFlat) SetEndTimestamp(v time.Time) {
	o.EndTimestamp.Set(&v)
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *JobItemFlat) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobItemFlat) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *JobItemFlat) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *JobItemFlat) SetStatus(v Status) {
	o.Status = &v
}

func (o JobItemFlat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobItemFlat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["k8s_name"] = o.K8sName
	toSerialize["namespace"] = o.Namespace
	toSerialize["kind"] = o.Kind
	toSerialize["gpu_count"] = o.GpuCount
	toSerialize["cpu_count"] = o.CpuCount
	toSerialize["memory_count"] = o.MemoryCount
	toSerialize["avg_gpu_utilization"] = o.AvgGpuUtilization
	toSerialize["creation_timestamp"] = o.CreationTimestamp
	toSerialize["job_owner"] = o.JobOwner
	toSerialize["end_timestamp"] = o.EndTimestamp.Get()
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *JobItemFlat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"id",
		"name",
		"k8s_name",
		"namespace",
		"kind",
		"gpu_count",
		"cpu_count",
		"memory_count",
		"avg_gpu_utilization",
		"creation_timestamp",
		"job_owner",
		"end_timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobItemFlat := _JobItemFlat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobItemFlat)

	if err != nil {
		return err
	}

	*o = JobItemFlat(varJobItemFlat)

	return err
}

type NullableJobItemFlat struct {
	value *JobItemFlat
	isSet bool
}

func (v NullableJobItemFlat) Get() *JobItemFlat {
	return v.value
}

func (v *NullableJobItemFlat) Set(val *JobItemFlat) {
	v.value = val
	v.isSet = true
}

func (v NullableJobItemFlat) IsSet() bool {
	return v.isSet
}

func (v *NullableJobItemFlat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobItemFlat(val *JobItemFlat) *NullableJobItemFlat {
	return &NullableJobItemFlat{value: val, isSet: true}
}

func (v NullableJobItemFlat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobItemFlat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


