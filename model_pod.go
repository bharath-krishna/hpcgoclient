/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Pod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pod{}

// Pod struct for Pod
type Pod struct {
	Name string `json:"name"`
	CreationTimestamp time.Time `json:"creation_timestamp"`
	EndTimestamp NullableTime `json:"end_timestamp"`
	Containers []Container `json:"containers"`
	Status PodStatus `json:"status"`
	GpuCount int32 `json:"gpu_count"`
	GpuUtilization float32 `json:"gpu_utilization"`
}

type _Pod Pod

// NewPod instantiates a new Pod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPod(name string, creationTimestamp time.Time, endTimestamp NullableTime, containers []Container, status PodStatus, gpuCount int32, gpuUtilization float32) *Pod {
	this := Pod{}
	this.Name = name
	this.CreationTimestamp = creationTimestamp
	this.EndTimestamp = endTimestamp
	this.Containers = containers
	this.Status = status
	this.GpuCount = gpuCount
	this.GpuUtilization = gpuUtilization
	return &this
}

// NewPodWithDefaults instantiates a new Pod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodWithDefaults() *Pod {
	this := Pod{}
	return &this
}

// GetName returns the Name field value
func (o *Pod) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Pod) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Pod) SetName(v string) {
	o.Name = v
}

// GetCreationTimestamp returns the CreationTimestamp field value
func (o *Pod) GetCreationTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value
// and a boolean to check if the value has been set.
func (o *Pod) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTimestamp, true
}

// SetCreationTimestamp sets field value
func (o *Pod) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = v
}

// GetEndTimestamp returns the EndTimestamp field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Pod) GetEndTimestamp() time.Time {
	if o == nil || o.EndTimestamp.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.EndTimestamp.Get()
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pod) GetEndTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTimestamp.Get(), o.EndTimestamp.IsSet()
}

// SetEndTimestamp sets field value
func (o *Pod) SetEndTimestamp(v time.Time) {
	o.EndTimestamp.Set(&v)
}

// GetContainers returns the Containers field value
func (o *Pod) GetContainers() []Container {
	if o == nil {
		var ret []Container
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
func (o *Pod) GetContainersOk() ([]Container, bool) {
	if o == nil {
		return nil, false
	}
	return o.Containers, true
}

// SetContainers sets field value
func (o *Pod) SetContainers(v []Container) {
	o.Containers = v
}

// GetStatus returns the Status field value
func (o *Pod) GetStatus() PodStatus {
	if o == nil {
		var ret PodStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Pod) GetStatusOk() (*PodStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Pod) SetStatus(v PodStatus) {
	o.Status = v
}

// GetGpuCount returns the GpuCount field value
func (o *Pod) GetGpuCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value
// and a boolean to check if the value has been set.
func (o *Pod) GetGpuCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuCount, true
}

// SetGpuCount sets field value
func (o *Pod) SetGpuCount(v int32) {
	o.GpuCount = v
}

// GetGpuUtilization returns the GpuUtilization field value
func (o *Pod) GetGpuUtilization() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GpuUtilization
}

// GetGpuUtilizationOk returns a tuple with the GpuUtilization field value
// and a boolean to check if the value has been set.
func (o *Pod) GetGpuUtilizationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuUtilization, true
}

// SetGpuUtilization sets field value
func (o *Pod) SetGpuUtilization(v float32) {
	o.GpuUtilization = v
}

func (o Pod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["creation_timestamp"] = o.CreationTimestamp
	toSerialize["end_timestamp"] = o.EndTimestamp.Get()
	toSerialize["containers"] = o.Containers
	toSerialize["status"] = o.Status
	toSerialize["gpu_count"] = o.GpuCount
	toSerialize["gpu_utilization"] = o.GpuUtilization
	return toSerialize, nil
}

func (o *Pod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"creation_timestamp",
		"end_timestamp",
		"containers",
		"status",
		"gpu_count",
		"gpu_utilization",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPod := _Pod{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPod)

	if err != nil {
		return err
	}

	*o = Pod(varPod)

	return err
}

type NullablePod struct {
	value *Pod
	isSet bool
}

func (v NullablePod) Get() *Pod {
	return v.value
}

func (v *NullablePod) Set(val *Pod) {
	v.value = val
	v.isSet = true
}

func (v NullablePod) IsSet() bool {
	return v.isSet
}

func (v *NullablePod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePod(val *Pod) *NullablePod {
	return &NullablePod{value: val, isSet: true}
}

func (v NullablePod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


