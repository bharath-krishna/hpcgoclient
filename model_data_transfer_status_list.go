/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataTransferStatusList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTransferStatusList{}

// DataTransferStatusList struct for DataTransferStatusList
type DataTransferStatusList struct {
	Metadata PaginationMetadata `json:"metadata"`
	Items []DataTransferStatus `json:"items"`
}

type _DataTransferStatusList DataTransferStatusList

// NewDataTransferStatusList instantiates a new DataTransferStatusList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferStatusList(metadata PaginationMetadata, items []DataTransferStatus) *DataTransferStatusList {
	this := DataTransferStatusList{}
	this.Metadata = metadata
	this.Items = items
	return &this
}

// NewDataTransferStatusListWithDefaults instantiates a new DataTransferStatusList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferStatusListWithDefaults() *DataTransferStatusList {
	this := DataTransferStatusList{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *DataTransferStatusList) GetMetadata() PaginationMetadata {
	if o == nil {
		var ret PaginationMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatusList) GetMetadataOk() (*PaginationMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *DataTransferStatusList) SetMetadata(v PaginationMetadata) {
	o.Metadata = v
}

// GetItems returns the Items field value
func (o *DataTransferStatusList) GetItems() []DataTransferStatus {
	if o == nil {
		var ret []DataTransferStatus
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *DataTransferStatusList) GetItemsOk() ([]DataTransferStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *DataTransferStatusList) SetItems(v []DataTransferStatus) {
	o.Items = v
}

func (o DataTransferStatusList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTransferStatusList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata"] = o.Metadata
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *DataTransferStatusList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTransferStatusList := _DataTransferStatusList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTransferStatusList)

	if err != nil {
		return err
	}

	*o = DataTransferStatusList(varDataTransferStatusList)

	return err
}

type NullableDataTransferStatusList struct {
	value *DataTransferStatusList
	isSet bool
}

func (v NullableDataTransferStatusList) Get() *DataTransferStatusList {
	return v.value
}

func (v *NullableDataTransferStatusList) Set(val *DataTransferStatusList) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferStatusList) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferStatusList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferStatusList(val *DataTransferStatusList) *NullableDataTransferStatusList {
	return &NullableDataTransferStatusList{value: val, isSet: true}
}

func (v NullableDataTransferStatusList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferStatusList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


