/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateJobResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateJobResp{}

// CreateJobResp struct for CreateJobResp
type CreateJobResp struct {
	Status string `json:"status"`
	Kind string `json:"kind"`
	Id string `json:"id"`
	Message string `json:"message"`
}

type _CreateJobResp CreateJobResp

// NewCreateJobResp instantiates a new CreateJobResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateJobResp(status string, kind string, id string, message string) *CreateJobResp {
	this := CreateJobResp{}
	this.Status = status
	this.Kind = kind
	this.Id = id
	this.Message = message
	return &this
}

// NewCreateJobRespWithDefaults instantiates a new CreateJobResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateJobRespWithDefaults() *CreateJobResp {
	this := CreateJobResp{}
	return &this
}

// GetStatus returns the Status field value
func (o *CreateJobResp) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CreateJobResp) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CreateJobResp) SetStatus(v string) {
	o.Status = v
}

// GetKind returns the Kind field value
func (o *CreateJobResp) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CreateJobResp) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CreateJobResp) SetKind(v string) {
	o.Kind = v
}

// GetId returns the Id field value
func (o *CreateJobResp) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateJobResp) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateJobResp) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *CreateJobResp) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CreateJobResp) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CreateJobResp) SetMessage(v string) {
	o.Message = v
}

func (o CreateJobResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateJobResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["kind"] = o.Kind
	toSerialize["id"] = o.Id
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *CreateJobResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"kind",
		"id",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateJobResp := _CreateJobResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateJobResp)

	if err != nil {
		return err
	}

	*o = CreateJobResp(varCreateJobResp)

	return err
}

type NullableCreateJobResp struct {
	value *CreateJobResp
	isSet bool
}

func (v NullableCreateJobResp) Get() *CreateJobResp {
	return v.value
}

func (v *NullableCreateJobResp) Set(val *CreateJobResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateJobResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateJobResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateJobResp(val *CreateJobResp) *NullableCreateJobResp {
	return &NullableCreateJobResp{value: val, isSet: true}
}

func (v NullableCreateJobResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateJobResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


