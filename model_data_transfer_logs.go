/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataTransferLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTransferLogs{}

// DataTransferLogs struct for DataTransferLogs
type DataTransferLogs struct {
	Source string `json:"source"`
	Target string `json:"target"`
}

type _DataTransferLogs DataTransferLogs

// NewDataTransferLogs instantiates a new DataTransferLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferLogs(source string, target string) *DataTransferLogs {
	this := DataTransferLogs{}
	this.Source = source
	this.Target = target
	return &this
}

// NewDataTransferLogsWithDefaults instantiates a new DataTransferLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferLogsWithDefaults() *DataTransferLogs {
	this := DataTransferLogs{}
	return &this
}

// GetSource returns the Source field value
func (o *DataTransferLogs) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DataTransferLogs) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DataTransferLogs) SetSource(v string) {
	o.Source = v
}

// GetTarget returns the Target field value
func (o *DataTransferLogs) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *DataTransferLogs) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *DataTransferLogs) SetTarget(v string) {
	o.Target = v
}

func (o DataTransferLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTransferLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

func (o *DataTransferLogs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTransferLogs := _DataTransferLogs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTransferLogs)

	if err != nil {
		return err
	}

	*o = DataTransferLogs(varDataTransferLogs)

	return err
}

type NullableDataTransferLogs struct {
	value *DataTransferLogs
	isSet bool
}

func (v NullableDataTransferLogs) Get() *DataTransferLogs {
	return v.value
}

func (v *NullableDataTransferLogs) Set(val *DataTransferLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferLogs(val *DataTransferLogs) *NullableDataTransferLogs {
	return &NullableDataTransferLogs{value: val, isSet: true}
}

func (v NullableDataTransferLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


