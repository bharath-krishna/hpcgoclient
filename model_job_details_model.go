/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JobDetailsModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobDetailsModel{}

// JobDetailsModel struct for JobDetailsModel
type JobDetailsModel struct {
	Metadata JobMetadata `json:"metadata"`
	Items []JobItemFlat `json:"items"`
}

type _JobDetailsModel JobDetailsModel

// NewJobDetailsModel instantiates a new JobDetailsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobDetailsModel(metadata JobMetadata, items []JobItemFlat) *JobDetailsModel {
	this := JobDetailsModel{}
	this.Metadata = metadata
	this.Items = items
	return &this
}

// NewJobDetailsModelWithDefaults instantiates a new JobDetailsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobDetailsModelWithDefaults() *JobDetailsModel {
	this := JobDetailsModel{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *JobDetailsModel) GetMetadata() JobMetadata {
	if o == nil {
		var ret JobMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *JobDetailsModel) GetMetadataOk() (*JobMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *JobDetailsModel) SetMetadata(v JobMetadata) {
	o.Metadata = v
}

// GetItems returns the Items field value
func (o *JobDetailsModel) GetItems() []JobItemFlat {
	if o == nil {
		var ret []JobItemFlat
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *JobDetailsModel) GetItemsOk() ([]JobItemFlat, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *JobDetailsModel) SetItems(v []JobItemFlat) {
	o.Items = v
}

func (o JobDetailsModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobDetailsModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata"] = o.Metadata
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *JobDetailsModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobDetailsModel := _JobDetailsModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobDetailsModel)

	if err != nil {
		return err
	}

	*o = JobDetailsModel(varJobDetailsModel)

	return err
}

type NullableJobDetailsModel struct {
	value *JobDetailsModel
	isSet bool
}

func (v NullableJobDetailsModel) Get() *JobDetailsModel {
	return v.value
}

func (v *NullableJobDetailsModel) Set(val *JobDetailsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableJobDetailsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableJobDetailsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobDetailsModel(val *JobDetailsModel) *NullableJobDetailsModel {
	return &NullableJobDetailsModel{value: val, isSet: true}
}

func (v NullableJobDetailsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobDetailsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


