/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataTransferOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTransferOutput{}

// DataTransferOutput struct for DataTransferOutput
type DataTransferOutput struct {
	TransferId string `json:"transfer_id"`
	Description string `json:"description"`
	Source DataTransferEndpoint `json:"source"`
	Target DataTransferEndpoint `json:"target"`
}

type _DataTransferOutput DataTransferOutput

// NewDataTransferOutput instantiates a new DataTransferOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferOutput(transferId string, description string, source DataTransferEndpoint, target DataTransferEndpoint) *DataTransferOutput {
	this := DataTransferOutput{}
	this.TransferId = transferId
	this.Description = description
	this.Source = source
	this.Target = target
	return &this
}

// NewDataTransferOutputWithDefaults instantiates a new DataTransferOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferOutputWithDefaults() *DataTransferOutput {
	this := DataTransferOutput{}
	return &this
}

// GetTransferId returns the TransferId field value
func (o *DataTransferOutput) GetTransferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferId
}

// GetTransferIdOk returns a tuple with the TransferId field value
// and a boolean to check if the value has been set.
func (o *DataTransferOutput) GetTransferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferId, true
}

// SetTransferId sets field value
func (o *DataTransferOutput) SetTransferId(v string) {
	o.TransferId = v
}

// GetDescription returns the Description field value
func (o *DataTransferOutput) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DataTransferOutput) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DataTransferOutput) SetDescription(v string) {
	o.Description = v
}

// GetSource returns the Source field value
func (o *DataTransferOutput) GetSource() DataTransferEndpoint {
	if o == nil {
		var ret DataTransferEndpoint
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DataTransferOutput) GetSourceOk() (*DataTransferEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DataTransferOutput) SetSource(v DataTransferEndpoint) {
	o.Source = v
}

// GetTarget returns the Target field value
func (o *DataTransferOutput) GetTarget() DataTransferEndpoint {
	if o == nil {
		var ret DataTransferEndpoint
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *DataTransferOutput) GetTargetOk() (*DataTransferEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *DataTransferOutput) SetTarget(v DataTransferEndpoint) {
	o.Target = v
}

func (o DataTransferOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTransferOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transfer_id"] = o.TransferId
	toSerialize["description"] = o.Description
	toSerialize["source"] = o.Source
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

func (o *DataTransferOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transfer_id",
		"description",
		"source",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTransferOutput := _DataTransferOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTransferOutput)

	if err != nil {
		return err
	}

	*o = DataTransferOutput(varDataTransferOutput)

	return err
}

type NullableDataTransferOutput struct {
	value *DataTransferOutput
	isSet bool
}

func (v NullableDataTransferOutput) Get() *DataTransferOutput {
	return v.value
}

func (v *NullableDataTransferOutput) Set(val *DataTransferOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferOutput(val *DataTransferOutput) *NullableDataTransferOutput {
	return &NullableDataTransferOutput{value: val, isSet: true}
}

func (v NullableDataTransferOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


