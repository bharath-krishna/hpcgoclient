/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserNamespacesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserNamespacesResp{}

// UserNamespacesResp struct for UserNamespacesResp
type UserNamespacesResp struct {
	OwnNamespaces []string `json:"own_namespaces"`
	OtherNamespaces []string `json:"other_namespaces"`
}

type _UserNamespacesResp UserNamespacesResp

// NewUserNamespacesResp instantiates a new UserNamespacesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserNamespacesResp(ownNamespaces []string, otherNamespaces []string) *UserNamespacesResp {
	this := UserNamespacesResp{}
	this.OwnNamespaces = ownNamespaces
	this.OtherNamespaces = otherNamespaces
	return &this
}

// NewUserNamespacesRespWithDefaults instantiates a new UserNamespacesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNamespacesRespWithDefaults() *UserNamespacesResp {
	this := UserNamespacesResp{}
	return &this
}

// GetOwnNamespaces returns the OwnNamespaces field value
func (o *UserNamespacesResp) GetOwnNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OwnNamespaces
}

// GetOwnNamespacesOk returns a tuple with the OwnNamespaces field value
// and a boolean to check if the value has been set.
func (o *UserNamespacesResp) GetOwnNamespacesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnNamespaces, true
}

// SetOwnNamespaces sets field value
func (o *UserNamespacesResp) SetOwnNamespaces(v []string) {
	o.OwnNamespaces = v
}

// GetOtherNamespaces returns the OtherNamespaces field value
func (o *UserNamespacesResp) GetOtherNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OtherNamespaces
}

// GetOtherNamespacesOk returns a tuple with the OtherNamespaces field value
// and a boolean to check if the value has been set.
func (o *UserNamespacesResp) GetOtherNamespacesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherNamespaces, true
}

// SetOtherNamespaces sets field value
func (o *UserNamespacesResp) SetOtherNamespaces(v []string) {
	o.OtherNamespaces = v
}

func (o UserNamespacesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserNamespacesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["own_namespaces"] = o.OwnNamespaces
	toSerialize["other_namespaces"] = o.OtherNamespaces
	return toSerialize, nil
}

func (o *UserNamespacesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"own_namespaces",
		"other_namespaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserNamespacesResp := _UserNamespacesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserNamespacesResp)

	if err != nil {
		return err
	}

	*o = UserNamespacesResp(varUserNamespacesResp)

	return err
}

type NullableUserNamespacesResp struct {
	value *UserNamespacesResp
	isSet bool
}

func (v NullableUserNamespacesResp) Get() *UserNamespacesResp {
	return v.value
}

func (v *NullableUserNamespacesResp) Set(val *UserNamespacesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableUserNamespacesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableUserNamespacesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserNamespacesResp(val *UserNamespacesResp) *NullableUserNamespacesResp {
	return &NullableUserNamespacesResp{value: val, isSet: true}
}

func (v NullableUserNamespacesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserNamespacesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


