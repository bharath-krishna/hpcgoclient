/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 1.9.10-9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataTransferEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTransferEndpoint{}

// DataTransferEndpoint struct for DataTransferEndpoint
type DataTransferEndpoint struct {
	Cluster Cluster `json:"cluster"`
	Namespace string `json:"namespace"`
	Pvc string `json:"pvc"`
	PvcPath string `json:"pvc_path"`
}

type _DataTransferEndpoint DataTransferEndpoint

// NewDataTransferEndpoint instantiates a new DataTransferEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferEndpoint(cluster Cluster, namespace string, pvc string, pvcPath string) *DataTransferEndpoint {
	this := DataTransferEndpoint{}
	this.Cluster = cluster
	this.Namespace = namespace
	this.Pvc = pvc
	this.PvcPath = pvcPath
	return &this
}

// NewDataTransferEndpointWithDefaults instantiates a new DataTransferEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferEndpointWithDefaults() *DataTransferEndpoint {
	this := DataTransferEndpoint{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *DataTransferEndpoint) GetCluster() Cluster {
	if o == nil {
		var ret Cluster
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *DataTransferEndpoint) GetClusterOk() (*Cluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *DataTransferEndpoint) SetCluster(v Cluster) {
	o.Cluster = v
}

// GetNamespace returns the Namespace field value
func (o *DataTransferEndpoint) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *DataTransferEndpoint) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *DataTransferEndpoint) SetNamespace(v string) {
	o.Namespace = v
}

// GetPvc returns the Pvc field value
func (o *DataTransferEndpoint) GetPvc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pvc
}

// GetPvcOk returns a tuple with the Pvc field value
// and a boolean to check if the value has been set.
func (o *DataTransferEndpoint) GetPvcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pvc, true
}

// SetPvc sets field value
func (o *DataTransferEndpoint) SetPvc(v string) {
	o.Pvc = v
}

// GetPvcPath returns the PvcPath field value
func (o *DataTransferEndpoint) GetPvcPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PvcPath
}

// GetPvcPathOk returns a tuple with the PvcPath field value
// and a boolean to check if the value has been set.
func (o *DataTransferEndpoint) GetPvcPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PvcPath, true
}

// SetPvcPath sets field value
func (o *DataTransferEndpoint) SetPvcPath(v string) {
	o.PvcPath = v
}

func (o DataTransferEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTransferEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	toSerialize["namespace"] = o.Namespace
	toSerialize["pvc"] = o.Pvc
	toSerialize["pvc_path"] = o.PvcPath
	return toSerialize, nil
}

func (o *DataTransferEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"namespace",
		"pvc",
		"pvc_path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTransferEndpoint := _DataTransferEndpoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTransferEndpoint)

	if err != nil {
		return err
	}

	*o = DataTransferEndpoint(varDataTransferEndpoint)

	return err
}

type NullableDataTransferEndpoint struct {
	value *DataTransferEndpoint
	isSet bool
}

func (v NullableDataTransferEndpoint) Get() *DataTransferEndpoint {
	return v.value
}

func (v *NullableDataTransferEndpoint) Set(val *DataTransferEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferEndpoint(val *DataTransferEndpoint) *NullableDataTransferEndpoint {
	return &NullableDataTransferEndpoint{value: val, isSet: true}
}

func (v NullableDataTransferEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


